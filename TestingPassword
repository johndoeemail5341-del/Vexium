<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <base target="_top">
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style>
      /* ===== Layout: fixed, no-scroll sidebar ===== */
      html, body {
        height: 100%;
        margin: 0;
        overflow: hidden;           /* <- no scrolling */
      }
      body {
        font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Arial, "Apple Color Emoji", "Segoe UI Emoji";
        display: grid;
        place-items: center;        /* center card in sidebar */
        background:
          radial-gradient(120% 60% at 0% 0%, #eef2ff 0%, #ffffff 40%, #ffffff 100%),
          linear-gradient(135deg, #e9d5ff 0%, #dbeafe 50%, #ffffff 100%);
        -webkit-font-smoothing: antialiased;
        color: #0f172a;
      }

      /* ===== Card (glassmorphism) ===== */
      .card {
        width: 92%;
        max-width: 420px;
        border-radius: 16px;
        padding: 18px 16px;
        position: relative;
        background: rgba(255, 255, 255, 0.72);
        border: 1px solid rgba(15, 23, 42, 0.06);
        box-shadow:
          0 8px 20px rgba(2, 6, 23, 0.08),
          inset 0 1px 0 rgba(255,255,255,0.6);
        backdrop-filter: blur(10px);
        animation: card-in 300ms ease-out;
      }
      @keyframes card-in {
        from { transform: translateY(6px); opacity: 0; }
        to   { transform: translateY(0); opacity: 1; }
      }

      /* ===== Header ===== */
      .hdr {
        display: flex; align-items: center; gap: 10px; margin-bottom: 8px;
      }
      .lock {
        width: 34px; height: 34px; border-radius: 10px;
        display: grid; place-items: center;
        background: linear-gradient(180deg, #f5f3ff, #ede9fe);
        border: 1px solid rgba(99, 102, 241, 0.25);
        box-shadow: inset 0 1px 0 rgba(255,255,255,0.8);
      }
      .lock svg { width: 18px; height: 18px; }
      h3 {
        font-size: 1.05rem; font-weight: 700; margin: 0;
        letter-spacing: .2px;
      }
      .desc {
        margin: 2px 0 12px 44px;   /* indented under header */
        color: #475569; font-size: .92rem;
      }

      /* ===== Form ===== */
      .row {
        display: grid; grid-template-columns: 1fr auto; gap: 8px;
        align-items: center;
      }
      .input {
        display: grid; grid-template-columns: 1fr auto; align-items: center;
        border: 1px solid #e5e7eb; border-radius: 12px;
        background: #ffffff;
        box-shadow: inset 0 1px 0 rgba(255,255,255,.7);
        padding: 6px 8px 6px 10px;
      }
      .input input {
        border: none; outline: none; background: transparent;
        font-size: .98rem; padding: 6px 2px;
      }
      .eye {
        border: none; background: transparent; cursor: pointer;
        padding: 6px; border-radius: 8px;
      }
      .eye:hover { background: rgba(2,6,23,.04); }

      .btn {
        --ring: 0 0 transparent;
        border: 1px solid #e5e7eb;
        background: linear-gradient(180deg, #ffffff, #f8fafc);
        padding: 10px 14px; border-radius: 12px; font-weight: 600;
        cursor: pointer; user-select: none;
        transition: transform 80ms ease, box-shadow 120ms ease;
        box-shadow: var(--ring), 0 1px 0 rgba(255,255,255,.8) inset;
      }
      .btn:hover { transform: translateY(-1px); }
      .btn:active { transform: translateY(0); }
      .btn:disabled { opacity: .55; cursor: not-allowed; }

      /* ===== Status pill ===== */
      .status {
        margin-top: 10px; display: inline-flex; align-items: center; gap: 8px;
        font-size: .92rem; padding: 6px 10px; border-radius: 999px;
        background: #f8fafc; border: 1px solid #e5e7eb;
      }
      .dot { width: 8px; height: 8px; border-radius: 50%; background: #94a3b8; box-shadow: 0 0 0 2px rgba(148,163,184,.18); }

      .status.checking { color: #334155; }
      .status.checking .dot { background: #94a3b8; animation: pulse 1s infinite; }

      .status.ok { color: #166534; background: #ecfdf5; border-color: #bbf7d0; }
      .status.ok .dot { background: #16a34a; box-shadow: 0 0 0 3px rgba(22,163,74,.15); }

      .status.bad { color: #b91c1c; background: #fef2f2; border-color: #fecaca; }
      .status.bad .dot { background: #dc2626; box-shadow: 0 0 0 3px rgba(220,38,38,.12); }

      @keyframes pulse {
        0% { transform: scale(1); opacity: .9; }
        50% { transform: scale(1.25); opacity: .6; }
        100% { transform: scale(1); opacity: .9; }
      }

      /* Micron UX niceties */
      .subtle {
        position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%);
        color: #94a3b8; font-size: .8rem; white-space: nowrap; pointer-events: none;
      }
    </style>
  </head>
  <body>
    <div class="card" role="group" aria-labelledby="hdr">
      <div class="hdr" id="hdr">
        <div class="lock" aria-hidden="true">
          <!-- lock icon -->
          <svg viewBox="0 0 24 24" fill="none" stroke="#6366f1" stroke-width="1.75" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
            <rect x="3.5" y="10" width="17" height="10.5" rx="2.5"></rect>
            <path d="M7.5 10V7a4.5 4.5 0 1 1 9 0v3"></path>
          </svg>
        </div>
        <h3>Password</h3>
      </div>
      <div class="desc">This console is password protected.</div>

      <div class="row" style="margin-top:12px;">
        <div class="input">
          <input id="pw" type="password" placeholder="Enter password" autocomplete="current-password" />
          <button class="eye" id="toggle" title="Show/Hide password" aria-label="Show or hide password">
            <!-- eye icon -->
            <svg id="eyeIc" viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="#64748b" stroke-width="1.75" stroke-linecap="round" stroke-linejoin="round">
              <path d="M1 12s4-7 11-7 11 7 11 7-4 7-11 7-11-7-11-7Z"></path>
              <circle cx="12" cy="12" r="3"></circle>
            </svg>
          </button>
        </div>
        <button id="go" class="btn">Submit</button>
      </div>

      <!-- Status pill -->
      <div id="status" class="status checking" aria-live="polite">
        <span class="dot" aria-hidden="true"></span>
        <span class="text">Waiting…</span>
      </div>

      <!-- tiny footer line (optional; safe to remove) -->
      <div class="subtle">Tip: Press Enter to submit</div>
    </div>

    <script>
      const $ = (id) => document.getElementById(id);
      const pwInput = $("pw");
      const goBtn = $("go");
      const statusEl = $("status");
      const statusText = statusEl.querySelector(".text");
      const toggleBtn = $("toggle");
      const eyeIc = $("eyeIc");

      function setStatus(kind, text) {
        statusEl.className = "status " + kind;
        statusText.textContent = text;
      }
      function setBusy(busy) {
        goBtn.disabled = busy;
        pwInput.disabled = busy;
        toggleBtn.disabled = busy;
        document.activeElement && document.activeElement.blur && busy && document.activeElement.blur();
      }

      // Password visibility toggle
      toggleBtn.addEventListener("click", () => {
        const showing = pwInput.type === "text";
        pwInput.type = showing ? "password" : "text";
        // swap eye icon (simple line tweak)
        eyeIc.setAttribute("stroke", showing ? "#64748b" : "#475569");
      });

      function submitPassword() {
        const value = (pwInput.value || "").trim();
        if (!value) {
          setStatus("bad", "Please enter a password");
          return;
        }
        setStatus("checking", "checking…");
        setBusy(true);

        google.script.run
          .withSuccessHandler(function(ok) {
            if (ok) {
              setStatus("ok", "correct");
            } else {
              setStatus("bad", "incorrect password");
            }
            setBusy(false);
          })
          .withFailureHandler(function() {
            setStatus("checking", "checking failed — try again");
            setBusy(false);
          })
          .checkPassword(value);
      }

      goBtn.addEventListener("click", submitPassword);
      pwInput.addEventListener("keydown", function(e) {
        if (e.key === "Enter") submitPassword();
      });

      // Focus first input on load
      setTimeout(() => pwInput?.focus(), 0);
    </script>
  </body>
</html>
